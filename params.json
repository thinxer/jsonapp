{"name":"JsonApp","tagline":"simplest json api framework","body":"A KISS WSGI application built to make pure AJAX application easier.\r\n\r\nExample server code:\r\n\r\n    # server.py\r\n    from jsonapp import DefaultWebApplication, serve\r\n\r\n    application = DefaultWebApplication()\r\n    api = application.jsonapp.decorator()\r\n\r\n    @api\r\n    def hello(name):\r\n        return { \"hello\":name }\r\n\r\n    serve(application, \"127.0.0.1\", 8080)\r\n\r\nExample JavaScript client code:\r\n\r\n    // include the script '/_client.js' first.\r\n    var r = new JsonRemote(\"/api\");\r\n    r.call(\"hello\", [\"JsonApp\"], function(err, d) {\r\n        if (err) {\r\n            document.write(JSON.stringify(err));\r\n        } else {\r\n            document.write(JSON.stringify(d));\r\n        }\r\n    });\r\n\r\nExample Python client code:\r\n\r\n    from jsonapp import Remote\r\n    r = Remote('http://localhost:8080/api')\r\n    r.hello('world')\r\n\r\nThe ``r`` object is tab-completable in IPython, which is quite handy.\r\n\r\nThe entire framework is designed to be easy to use, and no easier.\r\nTo speed up development, it also comes with a static file server. Drop your\r\nstatic files into ``static`` directory and your app is up and running.\r\n``index.html`` will be automatically mapped to the root path ``/``.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}